<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Robert Fleming&#39;s CIT Blog</title>
    <link>https://robertfleming448.github.io/post/</link>
    <description>Recent content in Posts on Robert Fleming&#39;s CIT Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 28 Apr 2021 22:36:45 -0700</lastBuildDate><atom:link href="https://robertfleming448.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CIT 481 blog 9</title>
      <link>https://robertfleming448.github.io/post/481blog9/</link>
      <pubDate>Wed, 28 Apr 2021 22:36:45 -0700</pubDate>
      
      <guid>https://robertfleming448.github.io/post/481blog9/</guid>
      <description>Introduction As this semester comes to a close, things begin to slow down. We have recently reached an interim period between project deliverables and planning as started for the next and final phase. In my other classes we have experienced a similar drought. One class is in the middle of a project I would consider non-technical and the other is in review for midterms/finals. I did have something prepared for an occasion such as this. Last semester I had planned to discuss a project in JavaScript but never had an opportunity to. So while it may not be necessarily fresh in my mind, I will try my best to describe my thought process.</description>
    </item>
    
    <item>
      <title>CIT 481 blog 8</title>
      <link>https://robertfleming448.github.io/post/481blog8/</link>
      <pubDate>Thu, 22 Apr 2021 12:50:59 -0700</pubDate>
      
      <guid>https://robertfleming448.github.io/post/481blog8/</guid>
      <description>Introduction This blog will act as a sort of &amp;ldquo;Housekeeping&amp;rdquo; in terms of project progress not much has changed since last I wrote. However several small changes have been made, and I think it would be fitting to make a blog post on the various minute details regarding the senior design project. While individually they are insignificant, together they are not.
Ansible Refactor In a previous blog post, I talked about our Web Stack automating Ansible playbook. In the range of time between this post and that one some changes have been made. To briefly recap, our first version of the Ansible Script as of Project 0&amp;rsquo;s completion installed Apache, PHP, mySQL, and pulled the Git repository holding our sample web app.</description>
    </item>
    
    <item>
      <title>CIT 481 blog 7</title>
      <link>https://robertfleming448.github.io/post/481blog7/</link>
      <pubDate>Wed, 14 Apr 2021 17:04:40 -0700</pubDate>
      
      <guid>https://robertfleming448.github.io/post/481blog7/</guid>
      <description>Introduction In this blog I will go over my recent endeavors in Computer Science 424. For this assignment we needed to build Apache from source and ensure our host operating system could view the website in a standard web browser. Several configuration changes must also be made during build. This includes:
 Multi-Processing Multi-threading  As these are not on by default we must build from source to have a version of Apache that suits our needs This assignment was very open-ended and involved reading documentation to discover a way of accomplishing the task. As a result, the conclusions I came to may not be the most efficient nor the recommended practice.</description>
    </item>
    
    <item>
      <title>CIT 481 blog 6</title>
      <link>https://robertfleming448.github.io/post/481blog6/</link>
      <pubDate>Thu, 08 Apr 2021 11:34:38 -0700</pubDate>
      
      <guid>https://robertfleming448.github.io/post/481blog6/</guid>
      <description>Preface I am going to try something slightly different this week. As I don&amp;rsquo;t feel that my progress in any one project is substantial nor unique enough to fill the contents of a full blog, I am going to make this blog a double feature The first part will detail my exploits in Terraform to quickly build cloud architecture, and my second part will explain how I setup pf in freeBSD.
Terraform Introduction This part will go over how I created the AWS infrastructure for our group project using Terraform. I was tasked with writing the compute section of our Terraform which includes:</description>
    </item>
    
    <item>
      <title>CIT 481 blog 5</title>
      <link>https://robertfleming448.github.io/post/481blog5/</link>
      <pubDate>Wed, 31 Mar 2021 17:37:47 -0700</pubDate>
      
      <guid>https://robertfleming448.github.io/post/481blog5/</guid>
      <description>Introduction As mentioned in the blog prior where I discussed Load Balancers and Certificates on AWS, this week I will be going over my solution for getting our SSH bastion to function as intended.
SSH Bastion As a preface, an SSH Bastion is a remote server that resides in a public section of a network. By connecting to this node, you can further connect to other machines located in private, non-internet facing subnets.
Server Setup An ssh bastion really is very similar to any other machine out there. All that really matters for our implementation is having a network with a private and public subnet.</description>
    </item>
    
    <item>
      <title>CIT 481 blog 4</title>
      <link>https://robertfleming448.github.io/post/481blog4/</link>
      <pubDate>Thu, 25 Mar 2021 13:45:40 -0700</pubDate>
      
      <guid>https://robertfleming448.github.io/post/481blog4/</guid>
      <description>Introduction In this blog I will record my issues and solutions I went through while trying to complete the first module of our CIT 481 Senior Design project.
Background Our team is undergoing an alternative project offered by the professor and we are tasked with using an Ansible playbook to automate building a tech stack on an AWS infrastructure. This infrastructure includes 3 private and 3 public subnets spanning across 3 separate availability zones. Each Availability zone must contain a private web server EC2 instance and a public SSH bastion Host EC2 instance. I will focus on the computing resources in this blog and less so on the VPC as that was a lesser role of mine.</description>
    </item>
    
    <item>
      <title>CIT 481 blog 3</title>
      <link>https://robertfleming448.github.io/post/481blog3/</link>
      <pubDate>Wed, 10 Mar 2021 18:33:58 -0800</pubDate>
      
      <guid>https://robertfleming448.github.io/post/481blog3/</guid>
      <description>Introduction For this blog I will be going over my process and reasoning for creating a Minecraft Server with a Raspberry Pi 4. This is one of the topics I have saved for moments that are somewhat slow this semester. While I have been working diligently on other projects, the content is not substantial enough to fill an entire blog. As a result, I will keep it on the backburner until I feel suitable progress has been made.
Reasoning During this pandemic, I find interacting with friends online to be a more pressing matter. Without avenues to interact with my peers, I would surely go mad.</description>
    </item>
    
    <item>
      <title>CIT 481 blog 2</title>
      <link>https://robertfleming448.github.io/post/481blog2/</link>
      <pubDate>Wed, 03 Mar 2021 19:30:09 -0800</pubDate>
      
      <guid>https://robertfleming448.github.io/post/481blog2/</guid>
      <description>Introduction This blog I will be detailing the process I went through to acquire a domain and a TLS certificate to allow HTTPS traffic. This will be the first part in a potential multipart series going through my tasks in the CIT 481 semester-long group project. I was put in charge of Domain and Certificate Acquisition as I was the one with the most experience with domains.
Domain Choice Being poor college students, we didn&amp;rsquo;t want to break the bank on our domain. However, we still wanted it to be related to our team, to make it easily distinguishable. With those prerequisites in mind, I went searching several domain registrar websites to find a cheap year long domain license.</description>
    </item>
    
    <item>
      <title>CIT 481 blog 1</title>
      <link>https://robertfleming448.github.io/post/481blog1/</link>
      <pubDate>Wed, 24 Feb 2021 20:53:24 -0800</pubDate>
      
      <guid>https://robertfleming448.github.io/post/481blog1/</guid>
      <description>Introduction Despite this being my senior year, and having a relatively light scholastic work-load, I still thankfully have something to write about. I have a backlog of projects that I can dive into should the need arise later in the semester perhaps when things slow down. Additionally, only 2 of my 3 major classes this semester I would consider &amp;ldquo;technical.&amp;rdquo; One of those has little to no coding on a weekly basis. However this week that class has provided me with an opportunity to write down my lab progress. We were tasked with configuring, building, and installing a custom kernel for FreeBSD.</description>
    </item>
    
    <item>
      <title>CIT 481 blog 0</title>
      <link>https://robertfleming448.github.io/post/481blog0/</link>
      <pubDate>Thu, 18 Feb 2021 13:40:25 -0800</pubDate>
      
      <guid>https://robertfleming448.github.io/post/481blog0/</guid>
      <description>Introduction As we start a fresh semester, I find a fresh set of visuals will help keep things interested. As such, my blogs now have a sleek minimalistic design using the Hugo Fuji theme. Yes you read that right. My blog will now be using Hugo. For my previous blogs that I wrote during my semester in CIT 480, I used a similar static site generator called Jekyll. While it did the job, I by no means used all its features to their best extent, and I overall was not too fond of it. That is why I decided to use Hugo from this point forward.</description>
    </item>
    
    <item>
      <title>CIT 480 blog 12</title>
      <link>https://robertfleming448.github.io/post/480blog12/</link>
      <pubDate>Wed, 17 Feb 2021 23:53:58 -0800</pubDate>
      
      <guid>https://robertfleming448.github.io/post/480blog12/</guid>
      <description>Introduction This blog will be the final part in my PHP learning series. In the last part we went over the basic scripts and functions required to create a basic website login/signup feature. In this section I will go over the additional optional features I added to make the website more complete. The two features I will go over in this blog are the change password script, and the integration of 2 step authentication via Twilio webservices. Beginning Setup
Before we dive straight into the scripts first, we need to a page to host links to these scripts. Since I do not feel these features should be included as default entries on the standard account page, I created a separate options php page.</description>
    </item>
    
    <item>
      <title>CIT 480 blog 11</title>
      <link>https://robertfleming448.github.io/post/480blog11/</link>
      <pubDate>Wed, 17 Feb 2021 23:53:56 -0800</pubDate>
      
      <guid>https://robertfleming448.github.io/post/480blog11/</guid>
      <description>Introduction This blog will feature part 2 of my PHP login system explanation. For some more background make sure to check out my 10th blog in this series. This blog will be rather lengthy so I will try my best not repeat my past blog’s contents. Without further ado, this is how I made a login system for my Comp 484 final group project.
Required Scripts This system required many scripts written in PHP. PHP is a server-side scripting language. In the past I have done server-side scripting via CGI scripting but never have I used PHP. So, if some of my explanations aren’t 100% accurate I apologize ahead of time.</description>
    </item>
    
    <item>
      <title>CIT 480 blog 10</title>
      <link>https://robertfleming448.github.io/post/480blog10/</link>
      <pubDate>Wed, 17 Feb 2021 23:53:52 -0800</pubDate>
      
      <guid>https://robertfleming448.github.io/post/480blog10/</guid>
      <description>Introduction For the next few blogs, I will be writing a series showing off bits of code I have written for my Computer Science 484 final group project. This blog will be used to provide a little background and explain a program that I wrote to help us in the future.
The Project The project is an interactive web application that uses templates to auto-generate hundreds of unique algebra problems focusing on middle-school and high-school students. The application will track user progress by recording how many correct and incorrect answers a user gets on specific subjects. To implement this several systems needed to be made.</description>
    </item>
    
    <item>
      <title>CIT 480 blog 9</title>
      <link>https://robertfleming448.github.io/post/480blog9/</link>
      <pubDate>Wed, 17 Feb 2021 23:53:48 -0800</pubDate>
      
      <guid>https://robertfleming448.github.io/post/480blog9/</guid>
      <description>Introduction This blog will detail the process I used to complete the fourth lab for CIT 480, in which I configured an AWS EC2 instance to allow communication with an AWS simple storage system bucket. For the most part I thought this lab was pretty straight forward but I did have a minor hiccup which I will detail in a later section.
Background I currently have access to 2 AWS accounts. One is my educate account which still has most of the initial 100 dollar funds. The other is my regular AWS account, which although it does not have any education credits is still within its, first year granting me free tier access to resources.</description>
    </item>
    
    <item>
      <title>CIT 480 blog 8</title>
      <link>https://robertfleming448.github.io/post/480blog8/</link>
      <pubDate>Wed, 17 Feb 2021 23:53:45 -0800</pubDate>
      
      <guid>https://robertfleming448.github.io/post/480blog8/</guid>
      <description>Introduction In this blog I will talk about all the methods I’ve used to configure my network in order to play multiplayer games with friends. I thought this would be a good addition to a blog I posted two weeks ago as it has similar concepts, where I discussed troubleshooting connection problems with my friends trying to play a multiplayer game. For this blog I will be focusing on the four methods I’ve used to play the popular sandbox game: Minecraft with my friends in the past.
Option 1: The Easiest Yet Least Convenient By far the easiest way to play most PC games with friends is to actually do no network configuration.</description>
    </item>
    
    <item>
      <title>CIT 480 blog 7</title>
      <link>https://robertfleming448.github.io/post/480blog7/</link>
      <pubDate>Wed, 17 Feb 2021 23:53:42 -0800</pubDate>
      
      <guid>https://robertfleming448.github.io/post/480blog7/</guid>
      <description>Introduction This Blog will detail the trials and tribulations I faced while completing Lab 3. Lab 3 tasked us with yet again recompleting the steps of the prior lab autonomously. This lab required us to once again recreate the lamp stack using an Ansible playbook.
Ansible Installing Ansible was very easy. I already had Python on my machine so I was able to easily install Ansible using the apt-get install ansible command. From that point I made a simple playbook that would run on my local host (127.0. 0.1) so that I could see if everything was functioning. I had it install PHP through apt.</description>
    </item>
    
    <item>
      <title>CIT 480 blog 6</title>
      <link>https://robertfleming448.github.io/post/480blog6/</link>
      <pubDate>Wed, 17 Feb 2021 23:53:38 -0800</pubDate>
      
      <guid>https://robertfleming448.github.io/post/480blog6/</guid>
      <description>Introduction For this blog I actually have something more technical to write about. Since I am a CIT student and this is a fact my good friends are aware of, it is not unlikely for me to be summoned for computer help. In a saga of advice, I have given to my self-admitting technology illiterate friend I aided him in a peer to peer networking issue. I am always happy to help my friends and to stretch my “IT muscles.”
A Little Background I have previously given this friend a lot of advice in the past. Some of this included the ways of running Windows applications on his MacBook.</description>
    </item>
    
    <item>
      <title>CIT 480 blog 5</title>
      <link>https://robertfleming448.github.io/post/480blog5/</link>
      <pubDate>Wed, 17 Feb 2021 23:53:35 -0800</pubDate>
      
      <guid>https://robertfleming448.github.io/post/480blog5/</guid>
      <description>Introduction Although I thought I had little to discuss last blog regarding CIT, this week has been even less productive. While I have made progress in my computer science class, it was involving yet another HTML/CSS project. I have chosen to not talk about the same topic two postings in a row. Perhaps I will revisit the content of that class when we move on to browser scripts. This week beyond that I have been attending to my other non-major classes, so I have little to talk about that is both scholastic and technical. As a result, I will go over a personal project I recently did that does fit the technical aspect but not the scholastic one.</description>
    </item>
    
    <item>
      <title>CIT 480 blog 4</title>
      <link>https://robertfleming448.github.io/post/480blog4/</link>
      <pubDate>Wed, 17 Feb 2021 23:53:32 -0800</pubDate>
      
      <guid>https://robertfleming448.github.io/post/480blog4/</guid>
      <description>Introduction Since I have already completed the assignments thus far for CIT 480, I find myself at a lack of content to construct this blog about. As a result, I feel it’s appropriate to move into a more COMP 484 related direction. In this blog I will go over my first HTML/CSS Project for COMP 484 and the requirements/how I accomplished them.
Requirements The project was simple, we had to construct an HTML website with 4 pages and a stylesheet. Since we were allowed to pick any topic we wanted. I chose the video game franchise, The Legend of Zelda as I was certain I could fill 4 pages with content.</description>
    </item>
    
    <item>
      <title>CIT 480 blog 3</title>
      <link>https://robertfleming448.github.io/post/480blog3/</link>
      <pubDate>Wed, 17 Feb 2021 23:53:28 -0800</pubDate>
      
      <guid>https://robertfleming448.github.io/post/480blog3/</guid>
      <description>Introduction This blog will detail my struggles and procedures used while attempting the second lab for CIT 480. Much of this lab was very similar to the procedures of Lab 1, since the goal was to make a docker file to replicate the Lab 1 environment on demand. Given that this lab would contain similar content to my previous write-up, I will instead go into detail the hiccups I encountered while trying to complete the lab and how I eventually overcame them.
Problem Number 1. Since this lab was heavily based on Lab 1, I was refollowing Lab 1’s instructions to a T.</description>
    </item>
    
    <item>
      <title>CIT 480 Blog 2</title>
      <link>https://robertfleming448.github.io/post/480blog2/</link>
      <pubDate>Wed, 17 Feb 2021 23:53:25 -0800</pubDate>
      
      <guid>https://robertfleming448.github.io/post/480blog2/</guid>
      <description>Introduction This blog will document the processes and tribulations I faced while completing Lab 1 Lamp Stack. I did not anticipate much trouble with this lab since I have done a very similar process hosting an apache webserver on an ubuntu container in a previous class. However, the task was slightly different and as a result had specific requirements.
Docker Docker was a tool I have used in the past scholastically. While my previous docker installation/environment was no longer available I did not anticipate much trouble setting it up again. I ran into a slight hiccup but that was to be expected.</description>
    </item>
    
    <item>
      <title>CIT 480 blog 1</title>
      <link>https://robertfleming448.github.io/post/480blog1/</link>
      <pubDate>Wed, 17 Feb 2021 23:43:13 -0800</pubDate>
      
      <guid>https://robertfleming448.github.io/post/480blog1/</guid>
      <description>Introduction Given as this is my first officially numbered blog, I will now make the contents of this blog pertaining to my endeavors of class material. As a result, for this blog I will be primarily focusing on my experience setting up Git on my machine as well as Jekyll with its supporting modules.
Git The first step was configuring Git on my home computer. I have used Git before for work-related source code management, but I have never used it on my personal computer. So, while I was familiar with the standard git bash commands git add, git commit, git push etc.</description>
    </item>
    
    <item>
      <title>CIT 480 Blog 0</title>
      <link>https://robertfleming448.github.io/post/480blog0/</link>
      <pubDate>Wed, 17 Feb 2021 23:26:37 -0800</pubDate>
      
      <guid>https://robertfleming448.github.io/post/480blog0/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Since this is my first blog post for CIT 480 and I have little to discuss in terms of class content, I think it would be fitting to describe the process I used to enroll in COMP 484 and this class. When I went to enroll in this course&amp;rsquo;s corequisite, COMP 484, it was closed. I&amp;rsquo;ve been through this before and the only solution I&amp;rsquo;ve found is to refresh the page every couple of minutes to wait for availability. This would be no problem since this occurred in midst of Covid stay at home orders. However, I would be unavailable to refresh this during meals, bathing, etc. To solve this, I came up with a system to automize the refresh system.&lt;/p&gt;
&lt;p&gt;I decided to write this program in Java, as it was the programming language I was most familiar with. First off, I devised a logical breakdown for the program. The required modules were:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A bot that refreshed the page and navigated to the add screen&lt;/li&gt;
&lt;li&gt;A function that captured the page&lt;/li&gt;
&lt;li&gt;A function that parsed the image to see if any changes were made to the add screen&lt;/li&gt;
&lt;li&gt;A function that notifies me when a change occurs, so I can run to my computer&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Next are a few &amp;ldquo;optional&amp;rdquo; components that I included to make the program easier to bug correct&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A logging function that appends whenever a significant action occurs including time and picture&lt;/li&gt;
&lt;li&gt;Bug correction function that rescues the bot should it get stuck during page navigation&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;the-bot&#34;&gt;The Bot&lt;/h2&gt;
&lt;p&gt;I first made a bot that would navigate the page by pressing the &lt;code&gt;TAB&lt;/code&gt; key a predetermined amount of times and pressing &lt;code&gt;ENTER&lt;/code&gt; when required. To accomplish this, I used the &lt;code&gt;robot class&lt;/code&gt; located in the &lt;code&gt;java.awt&lt;/code&gt; library. This method encountered far too many infinite &amp;ldquo;death loops&amp;rdquo; when the bot got stuck on an incorrect page so I scrapped it.&lt;/p&gt;
&lt;p&gt;The second bot while less portable, used the same &lt;code&gt;Robot class&lt;/code&gt; as before. To ensure the bot never fell into an infinite loop, I hardcoded the bot to navigate using the mouse cursor using the measurements of my screen. This was not an elegant solution but for my purposes it functioned. The bot was capable of scrolling through the pages pressing the required radio bubble and waiting at the add screen before restarting the process. The code for this bot is below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;refreshPageAlt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; AWTException&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; InterruptedException
	&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		Robot robot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Robot&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;

		TimeUnit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SECONDS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

		robot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;keyPress&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;KeyEvent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;VK_F5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		robot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;keyRelease&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;KeyEvent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;VK_F5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

		TimeUnit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SECONDS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;8&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

		&lt;span style=&#34;color:#75715e&#34;&gt;//first Page
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		robot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mouseMove&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;700&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 200&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		TimeUnit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SECONDS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		robot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mousePress&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;InputEvent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BUTTON1_DOWN_MASK&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		robot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mouseRelease&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;InputEvent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BUTTON1_DOWN_MASK&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		TimeUnit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SECONDS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		robot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mouseMove&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1910&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 300&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		robot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mousePress&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;InputEvent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BUTTON1_DOWN_MASK&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		robot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mouseMove&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1910&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 1000&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		robot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mouseRelease&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;InputEvent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BUTTON1_DOWN_MASK&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		TimeUnit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SECONDS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		robot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mouseMove&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;700&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 940&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		TimeUnit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SECONDS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		robot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mousePress&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;InputEvent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BUTTON1_DOWN_MASK&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		robot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mouseRelease&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;InputEvent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BUTTON1_DOWN_MASK&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

		TimeUnit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SECONDS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;8&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

		&lt;span style=&#34;color:#75715e&#34;&gt;//Second Page
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		robot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mouseMove&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;220&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 450&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//alt screen size: (220, 450)	//main screen size(220, 470)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		robot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mousePress&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;InputEvent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BUTTON1_DOWN_MASK&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		robot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mouseRelease&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;InputEvent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BUTTON1_DOWN_MASK&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		TimeUnit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SECONDS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		robot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mouseMove&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;600&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 480&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//alt screen size: (600, 480)	//main screen size(600, 500)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;		robot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mousePress&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;InputEvent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BUTTON1_DOWN_MASK&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
		robot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mouseRelease&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;InputEvent&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BUTTON1_DOWN_MASK&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

		append&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Page Refreshed&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
	    System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Page Refreshed&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

	    TimeUnit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SECONDS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sleep&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;8&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;the-captureanalyzer&#34;&gt;The Capture/Analyzer&lt;/h2&gt;
&lt;p&gt;Next, I had to come up with a function that would take the contents of the screen and determine if a class became available. Luckily CSUN&amp;rsquo;s system color codes classes with the following scheme:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Green=Available&lt;/li&gt;
&lt;li&gt;Yellow=Waitlisted&lt;/li&gt;
&lt;li&gt;Blue=Closed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using these colors, I could easily determine changes in class availability based on color information. Utilizing the &lt;code&gt;Color class&lt;/code&gt; and the &lt;code&gt;Rectangle class&lt;/code&gt; I was able to take a screenshot of the page and get the RGB values of each pixel. By measuring the changes in green pixels on screen from previous measurements I could determine if availability changed. Part of the code is below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;capture&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            Robot robot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Robot&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;//Fullscreen but cropped around class hardcoded for my screen
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            Rectangle screenSize &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Rectangle&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Toolkit&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getDefaultToolkit&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getScreenSize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;//System.out.println(screenSize.width);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;//System.out.println(screenSize.height);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            Rectangle captureRect &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Rectangle&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;420&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 1130 &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; 2&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 581 &lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; 448&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;		&lt;span style=&#34;color:#75715e&#34;&gt;//alt screen dimensions: (420, 1130 / 2, 581 , 448);	//main screen size (420, 1150 / 2, 581 , 448 );
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            BufferedImage bufferedImage &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; robot&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;createScreenCapture&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;captureRect&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            File file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; File&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;screen-capture.png&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;	 
            &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ImageIO&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;write&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;bufferedImage&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;png&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            append&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Screen Captured ? &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; status &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; File Path:- &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getAbsolutePath&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
            System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Screen Captured ? &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; status &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; File Path:- &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getAbsolutePath&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parseImg&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IOException
	&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
		&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; greenCount&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
		&lt;span style=&#34;color:#75715e&#34;&gt;//Reading the image
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	      BufferedImage img &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ImageIO&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;read&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; File&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;screen-capture.png&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;));&lt;/span&gt;
	      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; img&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getHeight&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt; y&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt;
	      &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	         &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; img&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getWidth&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	            &lt;span style=&#34;color:#75715e&#34;&gt;//Retrieving contents of a pixel
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; pixel &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; img&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getRGB&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;x&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;y&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
	            &lt;span style=&#34;color:#75715e&#34;&gt;//Creating a Color object from pixel value
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	            Color color &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Color&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;pixel&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
	            &lt;span style=&#34;color:#75715e&#34;&gt;//Retrieving the R G B values
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	            &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; blue &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; color&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getBlue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
	            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;blue&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;50&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
	            &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
	            	greenCount&lt;span style=&#34;color:#f92672&#34;&gt;++;&lt;/span&gt;
	            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
	         &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
	      &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
	      &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; greenCount&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

	&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;notification&#34;&gt;Notification&lt;/h2&gt;
&lt;p&gt;Next, I needed to be able to know if a change had occurred. There were 2 methods I thought of that could accomplish this task:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using a SMTP server to utilize my cell provider&amp;rsquo;s email to SMS service address&lt;/li&gt;
&lt;li&gt;Using a third-party service and paying per SMS message&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I had initially started with the email method but after some configuration and thought I determined I didn&amp;rsquo;t have the resources to run a SMTP server on my computer. In the end I used a payed service called &lt;code&gt;Twilio&lt;/code&gt; Twilio provides the libraries required to use their SMS services in dozens of computer languages, Java included. In the end from testing and utilization  the service cost me a little over a dollar, with each text costing a fraction of a cent.&lt;/p&gt;
&lt;h2 id=&#34;error-correction&#34;&gt;Error Correction&lt;/h2&gt;
&lt;p&gt;Every so often, the program would get stuck in a loop that I had not accounted for. This was not surprising as many parts of the bot were hardcoded for my environment. To fix this I added the link to the add page to the program. After encountering too many error values, the bot would rescue itself by returning to the starting page. While this solution was not the most elegant, again it worked for my purposes.&lt;/p&gt;
&lt;h2 id=&#34;logging&#34;&gt;Logging&lt;/h2&gt;
&lt;p&gt;This was by far the easiest function to implement. The method would just append the programs current status and time to a text document. Additionally, it would save a screenshot titled the current time. If an error were to occur, I could read the log and look at the corresponding image to try and determine the cause.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In the end the program was a rousing success. I had turned the program on while I was eating lunch and low and behold a notification. I ran to my computer and found the class space open. Without this notification there is no doubt this availability would have been snatched up before I noticed. For this reason, I think the time and money I invested in this program was well worth it.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
