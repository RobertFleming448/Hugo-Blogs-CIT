<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ansible on Robert Fleming&#39;s CIT Blog</title>
    <link>https://robertfleming448.github.io/tags/ansible/</link>
    <description>Recent content in Ansible on Robert Fleming&#39;s CIT Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 22 Apr 2021 12:50:59 -0700</lastBuildDate><atom:link href="https://robertfleming448.github.io/tags/ansible/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CIT 481 blog 8</title>
      <link>https://robertfleming448.github.io/post/481blog8/</link>
      <pubDate>Thu, 22 Apr 2021 12:50:59 -0700</pubDate>
      
      <guid>https://robertfleming448.github.io/post/481blog8/</guid>
      <description>Introduction This blog will act as a sort of &amp;ldquo;Housekeeping&amp;rdquo; in terms of project progress not much has changed since last I wrote. However several small changes have been made, and I think it would be fitting to make a blog post on the various minute details regarding the senior design project. While individually they are insignificant, together they are not.
Ansible Refactor In a previous blog post, I talked about our Web Stack automating Ansible playbook. In the range of time between this post and that one some changes have been made. To briefly recap, our first version of the Ansible Script as of Project 0&amp;rsquo;s completion installed Apache, PHP, mySQL, and pulled the Git repository holding our sample web app.</description>
    </item>
    
    <item>
      <title>CIT 481 blog 5</title>
      <link>https://robertfleming448.github.io/post/481blog5/</link>
      <pubDate>Wed, 31 Mar 2021 17:37:47 -0700</pubDate>
      
      <guid>https://robertfleming448.github.io/post/481blog5/</guid>
      <description>Introduction As mentioned in the blog prior where I discussed Load Balancers and Certificates on AWS, this week I will be going over my solution for getting our SSH bastion to function as intended.
SSH Bastion As a preface, an SSH Bastion is a remote server that resides in a public section of a network. By connecting to this node, you can further connect to other machines located in private, non-internet facing subnets.
Server Setup An ssh bastion really is very similar to any other machine out there. All that really matters for our implementation is having a network with a private and public subnet.</description>
    </item>
    
    <item>
      <title>CIT 481 blog 4</title>
      <link>https://robertfleming448.github.io/post/481blog4/</link>
      <pubDate>Thu, 25 Mar 2021 13:45:40 -0700</pubDate>
      
      <guid>https://robertfleming448.github.io/post/481blog4/</guid>
      <description>Introduction In this blog I will record my issues and solutions I went through while trying to complete the first module of our CIT 481 Senior Design project.
Background Our team is undergoing an alternative project offered by the professor and we are tasked with using an Ansible playbook to automate building a tech stack on an AWS infrastructure. This infrastructure includes 3 private and 3 public subnets spanning across 3 separate availability zones. Each Availability zone must contain a private web server EC2 instance and a public SSH bastion Host EC2 instance. I will focus on the computing resources in this blog and less so on the VPC as that was a lesser role of mine.</description>
    </item>
    
    <item>
      <title>CIT 480 blog 7</title>
      <link>https://robertfleming448.github.io/post/480blog7/</link>
      <pubDate>Wed, 17 Feb 2021 23:53:42 -0800</pubDate>
      
      <guid>https://robertfleming448.github.io/post/480blog7/</guid>
      <description>Introduction This Blog will detail the trials and tribulations I faced while completing Lab 3. Lab 3 tasked us with yet again recompleting the steps of the prior lab autonomously. This lab required us to once again recreate the lamp stack using an Ansible playbook.
Ansible Installing Ansible was very easy. I already had Python on my machine so I was able to easily install Ansible using the apt-get install ansible command. From that point I made a simple playbook that would run on my local host (127.0. 0.1) so that I could see if everything was functioning. I had it install PHP through apt.</description>
    </item>
    
  </channel>
</rss>
